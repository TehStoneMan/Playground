plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

archivesBaseName = 'Playground'
group = 'io.github.thestoneman.playground'
version = "${minecraft_version}-${version_major}.${version_api}.${version_minor}.${version_patch}"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
			resources {
				include '**/**'
				exclude '**/**.lang'
				exclude '**/**.blend*'
				exclude '**/**.obj'
				exclude '**/**.mtl'
				exclude '**/**.model'
				exclude '**/**.xcf'
			}
		}
	}
}

minecraft {
    mappings channel: project.mapping_channel, version: project.mapping_version
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Run configurations.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                playground { source sourceSets.main }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                playground { source sourceSets.main }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'examplemod'

            mods {
                playground { source sourceSets.main }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'playground', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                playground { source sourceSets.main }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
	    // location of the maven that hosts JEI files
	    name = "Progwml6 maven"
	    url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
	    // location of a maven mirror for JEI files, as a fallback
	    name = "ModMaven"
	    url = "https://modmaven.k-4u.nl"
	}
}

dependencies
{
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
}

/*
task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
build.dependsOn sourcesJar

task deobfJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.output
    classifier = 'deobf'
}
build.dependsOn deobfJar

task javadocJar(type: Jar, dependsOn: classes) {
    from javadoc
    classifier = 'javadoc'
}
build.dependsOn javadocJar

artifacts {
    archives sourcesJar
    archives deobfJar
    archives javadocJar
}

// Process resources on build
processResources {
	// This will ensure that this task is redone when the version changes.
	inputs.property 'version', project.version
	
	// Replace stuff in mods.toml, nothing else
	from( sourceSets.main.resources ) {
		include 'META-INF/mods.toml'
		
		// Replace version
		expand 'version':project.version
	}
	
	// Copy everything else except the mods.toml
	from( sourceSets.main.resources ) {
		exclude 'META-INF/mods.toml'
	}
}
*/

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes ([
            "Specification-Title": "playground",
            "Specification-Vendor": "TehStoneMan",
            "Specification-Version": "${minecraft_version}-${version}",
            "Implementation-Title": project.name,
            "Implementation-Version"  : project.jar.archiveVersion,
            "Implementation-Vendor" :"TehStoneMan",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
//def reobfFile = file("$buildDir/reobfJar/output.jar")
//def reobfArtifact = artifacts.add('default', reobfFile) {
//    type 'jar'
//    builtBy 'reobfJar'
//}


// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            //artifact reobfArtifact
            //artifact deobfJar
            //artifact sourcesJar
            //artifact javadocJar
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}