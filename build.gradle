buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'

// Define properties file
ext.configFile = file "gradle.properties"

configFile.withReader
{
    // Load config. It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

archivesBaseName = "Playground"
group = "io.github.thestoneman.playground"
version = "${config.minecraft_version}-${config.mod_major_version}.${config.api_major_version}.${config.minor_version}.${config.patch_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20180921-1.13'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                playground {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                playground {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories
{
    //maven
	//{
    //	// location of the maven that hosts JEI files
    //	name = "Progwml6 maven"
    //	url = "http://dvs1.progwml6.com/files/maven"
  	//}
  	//maven
  	//{
    //	// location of a maven mirror for JEI files, as a fallback
    //	name = "ModMaven"
    //	url = "modmaven.k-4u.nl"
  	//}
	//ivy
	//{
    //    name "Botania"
    //    artifactPattern "http://botaniamod.net/files/deobf/[module] [revision]-[classifier].[ext]"
    //}
    //ivy
    //{
    //    name "Thaumcraft"
    //    url "https://dl.dropboxusercontent.com/u/47135879"
    //    layout "pattern",
    //    {
    //    	artifact "[module]-[revision].[ext]"
    //    }
    //}
}

dependencies
{
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.13.2-25.0.50'

    //runtime "com.azanor.baubles:Baubles:${config.baubles_version}-deobf"

    //compile name: "Botania"           , group: "vazkii.botania", version: botania_version, classifier: "deobf"

	// compile against the JEI API but do not include it at runtime
	//deobfProvided "mezz.jei:jei_${config.minecraft_version}:${config.jei_version}:api"
	// at runtime, use the full JEI jar
	//runtime "mezz.jei:jei_${config.minecraft_version}:${config.jei_version}"
}

/*
sourceSets
{
    main
    {
        java
        {
        	srcDirs 'src/main/java'
        }
        resources
        {
        	srcDirs 'src/main/resources'
        }
    }
}
*/

/*
processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs)
    {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs)
    {
        exclude 'mcmod.info'
        exclude '*.xcf'
        exclude '*.wav'
    }
}
*/

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "playground",
            "Specification-Vendor": "TehStoneMan",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"TehStoneMan",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}